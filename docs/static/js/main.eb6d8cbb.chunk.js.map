{"version":3,"sources":["Components/Collapse.js","Components/CollapseWrap.js","App.js","reportWebVitals.js","index.js"],"names":["Collapse","props","className","style","backgroundColor","isExpanded","children","color","fontSize","onClick","onExpandedChange","expandedLabel","collapsedLabel","CollapseWrap","useState","setExpanded","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAGe,SAASA,EAASC,GAC/B,OACE,gCACE,mBAAGC,UAAU,OAAOC,MAAO,CAACC,gBAAgB,WAA5C,yqCAMA,uBAAMF,UAAU,MAAhB,UACGD,EAAMI,WACL,qBAAKH,UAAU,OAAf,SAAuBD,EAAMK,WAE7B,qBAAKJ,UAAU,SAEhBD,EAAMI,WACL,mBACEF,MAAO,CAAEI,MAAO,MAAOC,SAAU,UACjCC,QAAS,kBAAMR,EAAMS,oBAFvB,SAIGT,EAAMU,gBAGT,mBACER,MAAO,CAAEI,MAAO,QAASC,SAAU,UACnCC,QAAS,kBAAMR,EAAMS,oBAFvB,SAIGT,EAAMW,uBC3BJ,SAASC,IACtB,MAAkCC,oBAAS,GAA3C,mBAAOT,EAAP,KAAmBU,EAAnB,KAIA,OACE,cAACf,EAAD,CACEY,eAAe,yDACfD,cAAc,uCACdN,WAAYA,EACZK,iBAPyB,kBAAMK,GAAaV,IAG9C,SAME,0nBD8BNL,EAASgB,aAAe,CACtBJ,eAAgB,+DAChBD,cAAe,mDACfN,YAAY,EACZK,iBAAkB,cEtCLO,MARf,WACE,OACE,qBAAKf,UAAU,MAAf,SACE,cAACW,EAAD,OCMSK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.eb6d8cbb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Collapse(props) {\r\n  return (\r\n    <div>\r\n      <p className=\"show\" style={{backgroundColor:\"#b0d17d\"}}>\r\n        Мы жили в деревне, перед окном у нас был луг, весь золотой от множества\r\n        цветущих одуванчиков. Это было очень красиво. Все говорили: «Очень\r\n        красиво! Луг золотой». Однажды я рано встал удить рыбу и заметил, что\r\n        луг был не золотой, а зеленый\r\n      </p>\r\n      <span className=\"btn\">\r\n        {props.isExpanded ? (\r\n          <div className=\"show\">{props.children}</div>\r\n        ) : (\r\n          <div className=\"hide\"></div>\r\n        )}\r\n        {props.isExpanded ? (\r\n          <a\r\n            style={{ color: \"red\", fontSize: \"1.8rem\" }}\r\n            onClick={() => props.onExpandedChange()}\r\n          >\r\n            {props.expandedLabel}\r\n          </a>\r\n        ) : (\r\n          <a\r\n            style={{ color: \"green\", fontSize: \"1.8rem\" }}\r\n            onClick={() => props.onExpandedChange()}\r\n          >\r\n            {props.collapsedLabel}\r\n          </a>\r\n        )}\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nCollapse.propTypes = {\r\n  collapsedLabel: PropTypes.string,\r\n  expandedLabel: PropTypes.string,\r\n  isExpanded: PropTypes.bool,\r\n  onExpandedChange: PropTypes.func,\r\n};\r\n\r\nCollapse.defaultProps = {\r\n  collapsedLabel: \"Развернуть\",\r\n  expandedLabel: \"Свернуть\",\r\n  isExpanded: true,\r\n  onExpandedChange: () => {},\r\n};\r\n","import React, { useState } from \"react\";\r\nimport Collapse from \"./Collapse\";\r\n\r\nexport default function CollapseWrap() {\r\n  const [isExpanded, setExpanded] = useState(true);\r\n\r\n  const handleExpandedChange = () => setExpanded(!isExpanded);\r\n\r\n  return (\r\n    <Collapse\r\n      collapsedLabel=\"Подробнее\"\r\n      expandedLabel=\"Скрыть\"\r\n      isExpanded={isExpanded}\r\n      onExpandedChange={handleExpandedChange}\r\n    >\r\n      <p>\r\n        Когда же я возвращался около полудня домой, луг был опять весь золотой.\r\n        Я стал наблюдать. К вечеру луг опять позеленел.\r\n      </p>\r\n    </Collapse>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport CollapseWrap from \"./Components/CollapseWrap\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CollapseWrap />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}